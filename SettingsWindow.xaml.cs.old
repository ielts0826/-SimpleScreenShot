using Avalonia;
using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using Avalonia.Media; // Required for Brushes
using System; // Ensure System namespace is imported for Math class
using System.Threading.Tasks;

namespace ScreenCaptureTool;

public partial class SettingsWindow : Window
{
    private Config _config; // To hold the configuration object passed from MainWindow
    private TextBox ImgurClientIdTextBox => this.FindControl<TextBox>("ImgurClientIdTextBox")!;
    private TextBlock ImgurClientIdStatusText => this.FindControl<TextBlock>("ImgurClientIdStatusText")!;
    private TextBox ImgurClientSecretTextBox => this.FindControl<TextBox>("ImgurClientSecretTextBox")!;
    private TextBlock ImgurClientSecretStatusText => this.FindControl<TextBlock>("ImgurClientSecretStatusText")!;
    // PIN Auth Controls
    private Button GetPinButton => this.FindControl<Button>("GetPinButton")!;
    private TextBox ImgurPinTextBox => this.FindControl<TextBox>("ImgurPinTextBox")!;
    private Button SubmitPinButton => this.FindControl<Button>("SubmitPinButton")!;
    private TextBlock PinAuthStatusText => this.FindControl<TextBlock>("PinAuthStatusText")!;

    // Parameterless constructor for XAML designer preview
    public SettingsWindow()
    {
        InitializeComponent();
#if DEBUG
        this.AttachDevTools();
#endif
        // For designer preview, create a dummy config or handle null _config gracefully in UpdateImgurClientIdStatus
        _config = new Config(); 
        LoadConfigValues();
    }

    // Constructor to be called from MainWindow, passing the actual config object
    public SettingsWindow(Config config)
    {
        InitializeComponent();
#if DEBUG
        this.AttachDevTools();
#endif
        _config = config;
        LoadConfigValues();

        ImgurClientIdTextBox.TextChanged += ImgurClientIdTextBox_TextChanged;
        ImgurClientSecretTextBox.TextChanged += ImgurClientSecretTextBox_TextChanged;
        // PIN Auth Event Handlers are assigned in XAML via Click="HandlerName"
    }

    private void InitializeComponent()
    {
        AvaloniaXamlLoader.Load(this);
        UpdateImgurClientIdStatus();
        UpdateImgurClientSecretStatus();
        UpdatePinAuthStatus(); // Initial status for PIN auth section
    }

    private void LoadConfigValues()
    {
        if (ImgurClientIdTextBox != null && _config != null)
        {
            ImgurClientIdTextBox.Text = _config.ImgurClientId ?? string.Empty;
        }
        if (ImgurClientSecretTextBox != null && _config != null)
        {
            ImgurClientSecretTextBox.Text = _config.ImgurClientSecret ?? string.Empty;
        }
        UpdateImgurClientIdStatus();
        UpdateImgurClientSecretStatus();
    }

    private void ImgurClientIdTextBox_TextChanged(object? sender, TextChangedEventArgs e)
    {
        // Update the status text as the user types
        UpdateImgurClientIdStatus(true);
    }

    private void ImgurClientSecretTextBox_TextChanged(object? sender, TextChangedEventArgs e)
    {
        UpdateImgurClientSecretStatus(true);
    }

    private void UpdateImgurClientIdStatus(bool typing = false)
    {
        if (ImgurClientIdStatusText == null || _config == null) return;

        string currentId = ImgurClientIdTextBox?.Text?.Trim() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(currentId))
        {
            ImgurClientIdStatusText.Text = "Client ID 为空。Imgur 上传功能将不可用。";
            ImgurClientIdStatusText.Foreground = Avalonia.Media.Brushes.OrangeRed;
        }
        // Basic check, a real Client ID from Imgur is typically 15 chars for anonymous, or longer for registered apps.
        else if (currentId == "YOUR_IMGUR_CLIENT_ID_PLACEHOLDER" || currentId.Length < 10) 
        {
            ImgurClientIdStatusText.Text = "当前 Client ID 似乎无效或太短。请确保输入正确的 Client ID。";
            ImgurClientIdStatusText.Foreground = Avalonia.Media.Brushes.OrangeRed;
        }
        else
        {
            string statusTextWhenTyping = "Client ID 格式初步有效。点击 \"确定\" 保存。";
            string statusTextWhenSet = "Imgur Client ID 已设置。";
            ImgurClientIdStatusText.Text = typing ? statusTextWhenTyping : statusTextWhenSet;
            ImgurClientIdStatusText.Foreground = Avalonia.Media.Brushes.LightGreen;
        }
    }

    private void UpdateImgurClientSecretStatus(bool typing = false)
    {
        if (ImgurClientSecretStatusText == null || _config == null) return;

        string currentSecret = ImgurClientSecretTextBox?.Text?.Trim() ?? string.Empty;
        bool clientIdPresent = !string.IsNullOrWhiteSpace(ImgurClientIdTextBox?.Text?.Trim());

        if (string.IsNullOrWhiteSpace(currentSecret))
        {
            ImgurClientSecretStatusText.Text = clientIdPresent ? "Client Secret 为空。如果希望上传到个人账户，则需要填写。匿名上传不需要此项。" : "请先填写 Client ID。";
            ImgurClientSecretStatusText.Foreground = Avalonia.Media.Brushes.LightSlateGray;
        }
        else if (currentSecret.Length < 10)
        {
            ImgurClientSecretStatusText.Text = "当前 Client Secret 似乎太短。请确保输入正确的 Client Secret。";
            ImgurClientSecretStatusText.Foreground = Avalonia.Media.Brushes.OrangeRed;
        }
        else
        {
            string statusTextWhenTyping = "Client Secret 格式初步有效。点击 \"确定\" 保存。";
            string statusTextWhenSet = "Imgur Client Secret 已设置。";
            ImgurClientSecretStatusText.Text = typing ? statusTextWhenTyping : statusTextWhenSet;
            ImgurClientSecretStatusText.Foreground = Avalonia.Media.Brushes.LightGreen;
        }
        UpdatePinAuthControlsState(); // Update PIN controls based on ID/Secret state
    }

    private void UpdatePinAuthStatus(string message = "", bool isError = false)
    {
        if (PinAuthStatusText == null) return;
        PinAuthStatusText.Text = message;
        PinAuthStatusText.Foreground = isError ? Brushes.OrangeRed : Brushes.LightGreen;
        if (string.IsNullOrWhiteSpace(message) && _config?.ImgurAccessToken != null)
        {
            PinAuthStatusText.Text = "已成功连接到 Imgur 账户。如需重新授权，请再次获取 PIN。";
            PinAuthStatusText.Foreground = Brushes.LightGreen;
        }
        else if (string.IsNullOrWhiteSpace(message))
        {
             PinAuthStatusText.Text = "点击"获取授权PIN"按钮，然后在浏览器中授权并复制PIN码到上方输入框中。";
             PinAuthStatusText.Foreground = Brushes.LightSlateGray;
        }
    }

    private void UpdatePinAuthControlsState()
    {
        bool clientIdValid = !string.IsNullOrWhiteSpace(ImgurClientIdTextBox?.Text?.Trim()) && (ImgurClientIdTextBox.Text.Trim().Length >=10);
        bool clientSecretValid = !string.IsNullOrWhiteSpace(ImgurClientSecretTextBox?.Text?.Trim()) && (ImgurClientSecretTextBox.Text.Trim().Length >= 10);
        bool canGetPin = clientIdValid; // Can attempt to get PIN if Client ID is present
        bool canSubmitPin = clientIdValid && !string.IsNullOrWhiteSpace(ImgurPinTextBox?.Text?.Trim());

        if (GetPinButton != null) GetPinButton.IsEnabled = canGetPin;
        if (ImgurPinTextBox != null) ImgurPinTextBox.IsEnabled = clientIdValid; // Enable PIN input if Client ID is there
        if (SubmitPinButton != null) SubmitPinButton.IsEnabled = canSubmitPin;

        if (_config?.ImgurAccessToken != null)
        {
            // If already authorized, perhaps disable PIN input/submit or change button text
            // For now, let's allow re-authorization by keeping them enabled if ID/Secret are valid
            if (GetPinButton != null) GetPinButton.Content = "1. 重新获取 Imgur 授权 PIN";
        }
        else
        {
            if (GetPinButton != null) GetPinButton.Content = "1. 获取 Imgur 授权 PIN";
        }
    }

    private void GetPinButton_Click(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        string clientId = ImgurClientIdTextBox?.Text?.Trim() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(clientId))
        {
            UpdatePinAuthStatus("请先输入有效的 Imgur Client ID。", true);
            return;
        }

        string authUrl = $"https://api.imgur.com/oauth2/authorize?client_id={clientId}&response_type=pin";
        try
        {
            // Open the URL in the default browser
            var psi = new System.Diagnostics.ProcessStartInfo
            {
                FileName = authUrl,
                UseShellExecute = true
            };
            System.Diagnostics.Process.Start(psi);
            UpdatePinAuthStatus("已打开浏览器进行授权。请在 Imgur 页面授权后，将显示的 PIN 码复制到上方输入框。", false);
            ImgurPinTextBox.IsEnabled = true;
        }
        catch (Exception ex)
        {
            UpdatePinAuthStatus($"无法打开浏览器: {ex.Message}", true);
            MainWindow.LogToFile($"Error opening browser for Imgur PIN auth: {ex.Message}");
        }
    }

    private async void SubmitPinButton_Click(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        string clientId = ImgurClientIdTextBox?.Text?.Trim() ?? string.Empty;
        string clientSecret = ImgurClientSecretTextBox?.Text?.Trim() ?? string.Empty;
        string pin = ImgurPinTextBox?.Text?.Trim() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(clientId) || string.IsNullOrWhiteSpace(clientSecret) || string.IsNullOrWhiteSpace(pin))
        {
            UpdatePinAuthStatus("Client ID, Client Secret 和 PIN 码均不能为空才能授权。", true);
            return;
        }
        UpdatePinAuthStatus("正在尝试用 PIN 换取令牌...", false);
        SubmitPinButton.IsEnabled = false;
        GetPinButton.IsEnabled = false;

        try
        {
            var (accessToken, refreshToken, expiresAt) = await ImgurUploader.ExchangePinForTokensAsync(clientId, clientSecret, pin);

            if (!string.IsNullOrEmpty(accessToken) && !string.IsNullOrEmpty(refreshToken) && expiresAt.HasValue)
            {
                _config.ImgurAccessToken = accessToken;
                _config.ImgurRefreshToken = refreshToken;
                _config.ImgurTokenExpiresAt = expiresAt.Value;
                
                UpdatePinAuthStatus("成功获取并保存了 Imgur 授权令牌！点击"确定"保存整体设置。", false);
                MainWindow.LogToFile($"SettingsWindow: Successfully obtained Imgur tokens. AccessToken (partial): {_config.ImgurAccessToken.Substring(0, Math.Min(_config.ImgurAccessToken.Length, 8))}...");
                ImgurPinTextBox.Text = string.Empty; // Clear PIN after use
            }
            else
            {
                _config.ImgurAccessToken = null;
                _config.ImgurRefreshToken = null;
                _config.ImgurTokenExpiresAt = null;
                UpdatePinAuthStatus("PIN 授权失败：未能从 Imgur 获取到有效的令牌。请检查日志或稍后重试。", true);
                MainWindow.LogToFile($"SettingsWindow: Failed to obtain valid tokens from Imgur (ExchangePinForTokensAsync returned null/empty values).");
            }
            UpdatePinAuthControlsState(); // Refresh button states/text
        }
        catch (Exception ex) // Catch any other unexpected exceptions
        {
            _config.ImgurAccessToken = null;
            _config.ImgurRefreshToken = null;
            _config.ImgurTokenExpiresAt = null;
            UpdatePinAuthStatus($"PIN 授权时发生意外错误: {ex.Message}", true);
            MainWindow.LogToFile($"SettingsWindow: Unexpected exception during PIN exchange. Error: {ex.Message}");
        }
        finally
        {
             if (SubmitPinButton != null) SubmitPinButton.IsEnabled = true; 
             if (GetPinButton != null) GetPinButton.IsEnabled = true;
             UpdatePinAuthControlsState(); // Ensure controls are in correct state
        }
    }

    private void OkButton_Click(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        if (_config != null)
        {
            if (ImgurClientIdTextBox != null) 
            {
                _config.ImgurClientId = ImgurClientIdTextBox.Text?.Trim();
                MainWindow.LogToFile($"SettingsWindow: OK clicked. ImgurClient ID set to: {_config.ImgurClientId?.Substring(0, Math.Min(_config.ImgurClientId?.Length ?? 0, 5))}...");
            }
            if (ImgurClientSecretTextBox != null)
            {
                _config.ImgurClientSecret = ImgurClientSecretTextBox.Text?.Trim();
                string secretStatus = string.IsNullOrWhiteSpace(_config.ImgurClientSecret) ? "not set" : "set";
                MainWindow.LogToFile($"SettingsWindow: ImgurClientSecret is {secretStatus}.");
            }
        }
        this.Close(true); // Close the window, returning true to indicate OK/Save
    }

    private void CancelButton_Click(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
    {
        MainWindow.LogToFile("SettingsWindow: Cancel clicked.");
        this.Close(false); // Close the window, returning false to indicate Cancel
    }
} 